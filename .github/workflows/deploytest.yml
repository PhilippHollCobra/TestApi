name: deploy CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    - name: Restore dependencies
      run: dotnet restore 'src/.'
      
    - name: Build
      run: dotnet build --no-restore
      working-directory: 'src/.'
      
      
  unittests:
    name: Run UnitTests
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
    - name: Run Tests
      run: dotnet test 'src/WebApp.UnitTests' --filter UnitTest /p:CollectCoverage=true /p:Threshold=0%2c0%2c0 /p:ThresholdType=line%2cbranch%2cmethod
      
      
  publishArtifact:
    name: Publish API
    runs-on: ubuntu-latest
    needs: [unittests]
    steps:
    - uses: actions/checkout@v3
    - name: Publish
      run: dotnet publish 'src/WebApp.Api' -c Release --output ./Release
      
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: publishApi
        path: ./Release
        retention-days: 1
  
  
  createApiDoku:
    name: Create Api-Doku
    runs-on: ubuntu-latest
    needs: [publishArtifact]
    steps:
    - uses: actions/checkout@v3
    
    - name: LoadArtifact
      uses: actions/download-artifact@v3
      with:
        name: publishApi
        path: ./Release
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    - name: Restore dependencies
      run: dotnet restore 'src/.'
    
    - name: Generate swagger.json
      run: | 
        dotnet new tool-manifest
        dotnet tool install --version 6.5.0 Swashbuckle.AspNetCore.Cli
        dotnet swagger tofile --output ApiDoku/test.json ./Release/WebApp.Api.dll    
    
  deployApiDoku:
    name: Deploy Api-Doku
    runs-on: ubuntu-latest
    needs: [createApiDoku]
    steps:
    - uses: actions/checkout@v3
  
  
  deployArtifact:
    name: Deploy API
    runs-on: ubuntu-latest
    needs: [publishArtifact]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: publishApi
        path: ./Release
    
    - name: Display files
      run: ls -R
      working-directory: ./Release
